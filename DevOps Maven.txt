Day-20
	Maven:
	-Maven is a build automation tool used primarily for Java projects.
	-It simplifies the process of building, managing, and deploying Java applications.
	-It uses an XML file called pom.xml (Project Object Model) to manage project dependencies, configure build settings, and define the structure of the project.
	Maven helps in tasks like:
	-Dependency Management: Maven automatically downloads and manages the dependencies (libraries or frameworks) your project needs from central repositories.
	-Build Automation: It automates the process of compiling, testing, packaging, and deploying Java code. Maven provides predefined goals (commands) for each of these tasks.
	-Project Management: It helps in managing project versions, packaging formats (like JAR, WAR, etc.), and making sure that your project is following a consistent structure.
	-Standardization: Maven promotes a consistent, convention-based directory structure for Java projects, making it easier to collaborate and scale projects.
	-Integration: It can be integrated with other tools and systems, like Jenkins, for continuous integration/continuous delivery (CI/CD).
	
	What is a Build Tool?
	->A build tool is a software utility that automates the process of compiling, testing, packaging, and deploying code in software development.
	It helps manage the various stages of building a project and ensures that the development workflow is more efficient, consistent, and reproducible.
	1. Compilation: A build tool compiles source code into executable formats (like .exe, .jar, .war, .apk, etc.). It ensures that all code is compiled in the correct order and handles dependencies between files.
	2. Dependency Management: Many projects depend on external libraries or frameworks. A build tool can automatically download, update, and manage these dependencies, making it easier to include third-party code.
	3. Testing: It can run automated tests as part of the build process to ensure that the code is working correctly and to catch bugs early.
	4. Packaging: A build tool helps in packaging the application, meaning it bundles the compiled code and necessary resources (like images or configuration files) into deployable units (e.g., .jar, .war, .apk, etc.).
	5. Deployment: Once the build is successful, a build tool can automate the deployment process, pushing the application to staging or production environments.
	6. Automation: Build tools automate repetitive tasks like generating documentation, cleaning up temporary files, and running static code analysis, saving developers time and effort.
	
	Programming languages and their build tools
	->Java		:	Maven, Ant and Gradle
	->Python	:	pip
	->Nodejs	:	npm
	->Dart		:	Filutter (Filutter: same code compatable fot mobile, web and ios)
	->dotnet	:	Msbuild, Visual Studio
	
	Maven is used to perform the Unit testing and Integration testing
	-Unit Testing: In this we can test the code in small portions(units).
	-Integration Testing: In this we can test the entire code once.
	The tasks need to perform for the Java project are mentioned in the 'pom.xml' file, and it is developed by the developers.
	we need choose the buid tool according to the project code language.
	
####Roles of DevOps Engineer:
	1.Deployment: application need to deploy in the server, like: AWS, Azure and GCP
	2.Security: provide the security by using DevSecOps
	3.Configuration: need to write the configuration files using configuration tools
####4.Logs: check the logs for trouble shooting the errors
	
	Maven Build Life Cycle:
	The Maven Build Lifecycle is a well-defined, predefined sequence of phases that define the steps for building and deploying a project.
	A lifecycle in Maven is a collection of phases, where each phase represents a distinct task, like compiling code, running tests, packaging,
	and deploying the project. The lifecycle ensures that each step is executed in a specific order, and Maven knows what to do next.

	There are three built-in lifecycles in Maven:
	Default Lifecycle: This is the main lifecycle used for building and deploying your project.
	Clean Lifecycle: This lifecycle handles the cleaning of project artifacts (like deleting previously compiled files).
	Site Lifecycle: This is used to generate project documentation.
	
	Default Lifecycle Phases
	The most commonly used lifecycle is the Default Lifecycle, which has the following phases (executed in this specific order):
	validate: Validates that the project is correct and all necessary information is available.
	compile: Compiles the project's source code into bytecode. For Java, this means compiling the .java files into .class files.
	test: Runs any unit tests against the compiled source code using a testing framework like JUnit. If any test fails, the build will fail here.
	package: Packages the compiled code into its distributable format, such as a JAR, WAR, or EAR file.
	verify: Performs any checks to verify the correctness of the package, such as integration tests or quality checks.
	install: Installs the packaged project (JAR, WAR, etc.) into the local Maven repository, making it available for use as a dependency in other projects.
	deploy: Deploys the project to a remote repository for sharing with other developers or systems.
	
	Clean Lifecycle Phases
	The Clean Lifecycle is used for cleaning up the project, removing any previously generated artifacts (compiled code, packaged files, etc.).
	pre-clean: Executes actions before the clean phase (rarely used, but possible for custom tasks).
	clean: Cleans the project, usually by deleting the target/ directory (or wherever output is stored).
	post-clean: Executes actions after cleaning, for tasks like additional cleanup or notifications.

	Site Lifecycle Phases
	The Site Lifecycle is responsible for generating the project's site documentation.
	pre-site: Executes before generating the site (can be used for any setup tasks).
	site: Generates the site documentation based on the project information.
	post-site: Executes after generating the site (for tasks like additional documentation steps).
	site-deploy: Deploys the generated site to a web server or other repository.
	How It Works in Practice
	When you run a Maven command like mvn install, Maven automatically executes the phases of the Default Lifecycle in the correct order.
	For example:
	mvn install will run validate, compile, test, package, verify, and install.
	If you only want to run a specific phase, such as mvn compile, Maven will run all previous phases leading up to compile (like validate).
	
	Example of Maven Default Lifecycle in Action:
	mvn validate: Validates the project.
	mvn compile: Compiles the project code.
	mvn test: Runs unit tests.
	mvn package: Packages the compiled code into a .jar or .war file.
	mvn verify: It will do the integration testing
	mvn install: Installs the packaged file to the local Maven repository. The entire data stored in .m2 directory, which can be used by remaining users.
	mvn deploy: Deploys the package to a remote repository.
	
	Maven will compile the java applications by using the JDK(Java Development Kit).
	
	Build Tool Functions:
	Build tools are essential in software development, as they automate and streamline tasks involved in compiling, testing, packaging, and deploying applications. Here are the key functions of a build tool:
	1. Compilation and Building
	Source Code Compilation: Build tools automate the process of compiling source code into executable files, libraries, or bytecode.
	Dependency Management: They handle dependencies (e.g., external libraries) and ensure that all required components are included in the build process.
	Incremental Builds: They only recompile the parts of the project that have changed, speeding up the build process.
	2. Packaging
	Creating Archives: Build tools can package the compiled code and resources (e.g., images, configuration files) into distributable formats, such as JAR, WAR, ZIP, or Docker containers.
	Versioning: They help manage version numbers and ensure the correct versions of dependencies and components are packaged together.
	3. Testing
	Running Tests: Build tools often integrate with testing frameworks to run unit tests, integration tests, or other types of tests as part of the build process.
	Test Reporting: They generate test reports that summarize the results of the tests, indicating which tests passed, failed, or were skipped.
	4. Deployment and Distribution
	Deployment Automation: Build tools automate the deployment process by pushing the built application to development, staging, or production environments.
	Continuous Integration/Continuous Deployment (CI/CD): They integrate with CI/CD pipelines to automatically trigger builds and deployments whenever changes are pushed to a code repository.
	Artifact Management: Build tools can push built artifacts to repositories like Maven, NPM, or Docker Hub for storage and version management.
	5. Code Quality and Linting
	Static Code Analysis: Build tools can run linting and code quality checks to enforce coding standards and best practices.
	Formatting: Some build tools automatically format code to adhere to a specific style guide.
	6. Configuration Management
	Custom Build Configurations: Build tools support custom configuration options to tailor the build process based on project needs (e.g., different configurations for development, staging, and production).
	Environment Variables: They can manage environment-specific settings, such as API keys or deployment targets, using environment variables.
	7. Task Automation
	Custom Tasks: Build tools allow developers to define and automate custom tasks beyond compiling and packaging, such as minifying assets, copying files, or generating documentation.
	Dependency Graph: Build tools often include the ability to define a dependency graph, specifying the order in which tasks should be executed based on their dependencies.
	8. Monitoring and Logging
	Build Logging: They provide logs for each build, allowing developers to trace issues or failures.
	Notifications: Some build tools can send notifications or alerts about build successes or failures, helping teams stay informed.
	
	Deploying application in Tomcat
	-Tomcat manages the Java applications
	-> Taking a Java project from GitHub -> then cloning that repos to AWS server -> then installing the Maven and JDK(jdk version depends on the developer) -> then runs the Maven build cycle (Artifact will develop when runs the mvn package) -> Then installing the Tomcat -> then placing the artifact in Tomcat
	
	First Launch an Instance
	-> provide the name for the instance (Maven-Tomcat)
		-> then select the OS (Ubuntu)
			-> then select the instance type (t2.medium)
				-> then select the Key pair
					-> then select the security group
						-> then launch the instance
	Now we nead to connect to the server
	-connect with ssh, port number 22
	 -then clone the code from the github repository
	  -sudo apt update -y
	   -then install the required version of jdk(depends on developer requirement): sudo apt install openjdk-17-jdk -y
		-then install the maven(maven is the build tool for java project): sudo apt install maven -y
		 -to check the version of java: java --version
		  -to check the version of maven: mvn --version
		   -then change the directory to cloned repository(this contains a pom.xml file)
		    -then do the maven functions: mvn validate = to check the configuration
			 -mvn compile = to install the required dependencies and compile the source code(for compile it uses the jdk)
			  -mvn test = it will run the unit testing
			   -mvn package = it will package the application as artifact, naming convention of artifact is: artifact_id-version.packaging
			    * working functionality of the application stored in artifact
				-mvn verify = it will do the integration testing
				 -mvn install = it will going to install in local system
				  -then change the directory to deafault directory: cd
				   -now install Tomcat(Tomcat is the Java application manager):-> search for "tomcat 9 download" in google -> click on Apache Tomcat 9 Software Downloads -> then copy the tar.gz link address
				    -then download the tomcat into the server using the copied link address: wget "paste the link address"
				     -do the "ls" for checking that file downloaded or not
					  -and extract the tar file: tar -xvf file_name = tar -xvf apache-tomcat-9.0.100.tar.gz
					   -then remove the tar.gz file: rm apache-tomcat-9.0.100.tar.gz
					    -now rename the downloaded file name: mv apache-tomcat-9.0.100 tomcat9
					     -now copy the tomcat9 file into /opt directory: sudo cp -r tomcat9 /opt
						  -then change the directory to /opt directory
						   -then check the owners of the file: ls -l
						    -if it contains root user as the owner then change it to non-root user: sudo chown -R non-root_user:non-root_user tomcat9
						     -now copy the artifact into tomcat9, then change the directory to artifact path(artifact present in /home/ubuntu/JavaWebCalculator/target directory): cp webapp-0.1.war /opt/tomcat9/webapps/ 
						      -now check the artifact is copied or not: cd /opt/tomcat9/webapps/ -> ls -l
							   -then change the permissions for the file: sudo chmod 755 webapp-0.1.war
							    -then change directory to tomcat9: cd ..
								 -then change the directory to bin directory: cd bin
							      -then start tomcat: sh startup.sh
							       -now need to add the security group inbound rules with port number 8080
							        -then copy the public ip and search in the browser along with port number
								     -in the tomcat searh the webapp-0.1: public_ip:port_number/webapp-0.1
									 
Day-23
	Git Maven Docker Tomcat
	Deploying in docker:
	-In this we can install the Docker and run the application in a container
	 -First clone the Java project from Git
	  --sudo apt update -y
	   -then install the required version of jdk(depends on developer requirement): sudo apt install openjdk-17-jdk -y
		-then install the maven(maven is the build tool for java project): sudo apt install maven -y
		 -to check the version of java: java --version
		  -to check the version of maven: mvn --version
		   -then change the directory to cloned repository(this contains a pom.xml file)
		    -then do the maven functions: mvn validate = to check the configuration
			 -mvn compile = to install the required dependencies and compile the source code(for compile it uses the jdk)
			  -mvn test = it will run the unit testing
			   -mvn package = it will package the application as artifact, naming convention of artifact is: artifact_id-version.packaging
			    * working functionality of the application stored in artifact
				*Now application will run inside a contaier
				 -then install the Docker: search for Docker install in ubuntu -> open the first link and copy the code
				  -now creat a file docker.sh: vi docker.sh
				   -and paste the copied code in the docker.sh file
					-then run the docker.sh file: sh docker.sh
					 -to check the docker is installed or not: docker --version
					  -when docker installed then a group will created, to check that: sudo cat /etc/gshadow |grep docker
					   -then add the user to the docker group: sudo usermod -aG docker ubuntu
						-to check weather the user is added to ubuntu group or not: id user_name
						 -then run the command: sudo newgrp docker and exit
						  -and run the command: newgrp docker and also run the command to check the have permission or not: docker images
						   -then change the directory to JavaWebCalculator
							-then remove the dockerfile(create a dockerfile: vi dockerfile): rm dockerfile
							 -and rename the dockerfile2 to dockerfile (add the data into the dockerfile for creating docker image): mv dockerfile2 dockerfile
	# Use the official Tomcat images
	FROM tomcat:9-jdk17
	
	# Copy war file from the target directory into Tomcat's webapps folder
	COPY target/*.war /usr/local/tomcat/webapps/
	
	# Apply permissions to the copies WAR file(s)
	RUN chmod 755 /usr/lcaol/tomcat/webapps/*.war
	
	# Expose the Tomcat default port
	EXPOSE 8080
	
	# Start Tomcat
	CMD ["cataline.sh", "run"]
					-to build the docker image(with docker image we can run the Application in the container) run the command: docker build -t myapp:v1 .
					 -to check the image is created or not: docker images
					  -now to create the contaier run the docker run command: dokcer run --name myapp1 -d -p 8081:8080 myapp:v1
					   -to check the container is created or not(to see the running containers): docker ps
					    -then copy the ip address and run in the browser with port number and webapp: 98.81.79.70:8081/webapp-0.1/